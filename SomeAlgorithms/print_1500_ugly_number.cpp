#include "print_1500_ugly_number.h"
/************************************************************************/
/* 按照从小到大的顺序打印前1500个丑数
/* 我们把因子只包含2,3,5的数称为丑数，习惯上把1称为第1个丑数。比如6和8都是丑数，但是
/* 14就不是，因为6 = 2 * 3, 8 = 2 * 2 * 2，但是14 = 2 * 7，包含7这个因子，因此无法定义
/* 为丑数
/************************************************************************/

/************************************************************************/
/* 最简单粗暴的方式进行打印
/* 挨个判断每一个数是否为丑数，判断的方式：一直除以2,3，5，判断最终的结果是否为1
/************************************************************************/
void print_1500_ugly_number_iterator()
{
	int sum = 0;
	int number = 1;
	puts("*************************************************************************");
	while (sum < 1500)
	{
		if (is_ugly_number(number))
		{
			printf("%d\t", number);
			++sum;
		}

		++number;
	}

	puts("\n*************************************************************************");
}

/************************************************************************/
/* 判断一个数是否为丑数
/************************************************************************/
bool is_ugly_number(int number)
{
	while (number % 2 == 0)
	{
		number /= 2;
	}

	while (number % 3 == 0)
	{
		number /= 3;
	}

	while (number % 5 == 0)
	{
		number /= 5;
	}

	return number == 1;
}


/************************************************************************/
/* 不再挨个判断某个数是否为丑数，判断方式的逻辑如下：
/* 使用一个数组按照顺序存储已经判断好的丑数，然后使用这些数挨个乘以2，3,5，
/* 分别记为t2,t3,t5，要求t2,t3,t5比当前最大的丑数要大，取t2,t3,t5中最小的数
/* ，这样子就能保证数组中的丑数都是有序的。
/************************************************************************/
void print_1500_ugly_number_directly()
{
	int sum = 1500;
	int* arr = (int*)malloc(sizeof(int) * sum);
	memset(arr, 0, sizeof(int) * sum);
	arr[0] = 1;
	int* number2 = arr;
	int* number3 = arr;
	int* number5 = arr;

	int count = 0;
	while (count < sum)
	{
		while (*number2 * 2 <= arr[count])
		{
			++number2;
		}

		while (*number3 * 3 <= arr[count])
		{
			++number3;
		}

		while (*number5 * 5 <= arr[count])
		{
			++number5;
		}

		++count;
		int tmp = min_value(*number2 * 2, *number3 * 3, *number5 * 5);
		if(count >= sum)
		{
			break;
		}

		arr[count] = tmp;
	}

	puts("*************************************************************************");
	for (int i = 0; i < sum; ++i)
	{
		printf("%d\t", arr[i]);
	}
	puts("\n*************************************************************************");
	free(arr);
}

int min_value(int first, int second, int third)
{
	int tmp = (first < second) ? first : second;
	return (tmp < third) ? tmp : third;
}


/************************************************************************/
/* 算法入口
/************************************************************************/
void start_print_1500_ugly_number()
{
	//print_1500_ugly_number_iterator();
	print_1500_ugly_number_directly();
}